name: 'logs_on_demand'

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:

env:
  SURELOG_WITH_TCMALLOC: 'Off'

jobs:

# Linux build, test, and publish
  linux-install:
    name: "Linux | Install | ${{ matrix.compiler }} | ${{ matrix.config }}"
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        compiler:
        - gcc
        config:
        - release

    env:
      artifact-name: sl-linux-${{ matrix.compiler }}-${{ matrix.config }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: ./.github/linux-setup
      with:
        compiler: ${{ matrix.compiler }}
        ccache-key: linux-install-${{ matrix.compiler }}-${{ matrix.config }}

    - name: Build, install & test
      run: |
        if [ "${{ matrix.config }}" == "debug" ]; then
          export BUILD_TYPE=Debug
          export CMAKE_ADDITIONAL_ARGS=-DSURELOG_WITH_TCMALLOC=Off
        else
          export BUILD_TYPE=Release
          export CMAKE_ADDITIONAL_ARGS=
        fi

        export INSTALL_DIR=`pwd`/install

        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR $CMAKE_ADDITIONAL_ARGS -S . -B build
        cmake --build build -j $(nproc)
        cmake --install build

        # cmake --build build --target SurelogUnitTests -j $(nproc)
        # pushd build && ctest --output-on-failure && popd

        # rm -rf build      # make sure we only see installation artifacts
        
        # this shouldnt be necessary, and can't be reproduced outside CI
        # export CMAKE_PREFIX_PATH=$INSTALL_DIR

        # cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DINSTALL_DIR=$INSTALL_DIR -S tests/TestInstall -B tests/TestInstall/build
        # cmake --build tests/TestInstall/build -j $(nproc)

        # echo "-- pkg-config content --"
        # cat $INSTALL_DIR/lib/pkgconfig/Surelog.pc
        # PREFIX=$INSTALL_DIR make test_install_pkgconfig

    - name: Prepare build artifacts
      run: |
        mkdir artifacts
        mv install ${{ env.artifact-name }}
        tar czfp artifacts/${{ env.artifact-name }}.tar.gz ${{ env.artifact-name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact-name }}
        path: artifacts/${{ env.artifact-name }}.tar.gz


# Linux regression
  linux-regression:
    name: "Linux | Regression | ${{ matrix.compiler }} | ${{ matrix.config }} [${{ matrix.shard }}]"
    runs-on: ubuntu-24.04
    needs: linux-install
    strategy:
      fail-fast: false
      matrix:
        num_shards: [4]
        shard: [0, 1, 2, 3]
        compiler:
        - gcc
        config:
        - release
    env:
      build-artifact-name: sl-linux-${{ matrix.compiler }}-${{ matrix.config }}
      regression-artifact-name: sl-linux-${{ matrix.compiler }}-${{ matrix.config }}-regression-${{ matrix.shard }}

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update -qq &&
        sudo apt install -y libunwind-dev google-perftools libgoogle-perftools-dev

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        architecture: x64

    - name: Setup Python Packages
      run: pip3 install orderedmultidict psutil

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.build-artifact-name }}

    - name: Run regression ${{ matrix.shard }}/${{ matrix.num_shards }}
      timeout-minutes: 120
      run: |
        tar xzfp ${{ env.build-artifact-name }}.tar.gz
        mv ${{ env.build-artifact-name }} build
        rm ${{ env.build-artifact-name }}.tar.gz

        python3 scripts/regression.py run       \
          --jobs $(nproc)                       \
          --num_shards=${{ matrix.num_shards }} \
          --shard=${{ matrix.shard }}
        git status

    - name: Prepare regression artifacts
      if: always()
      run: |
        cd build
        mv regression ${{ env.regression-artifact-name }}
        find ${{ env.regression-artifact-name }} -name "*.tar.gz" | tar czfp ${{ env.regression-artifact-name }}.tar.gz -T -

    - name: Upload regression artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.regression-artifact-name }}
        path: build/${{ env.regression-artifact-name }}.tar.gz


# Collect statistics
  collect-statistics:
    name: "Linux | Statistics | ${{ matrix.compiler }} | ${{ matrix.config }}"
    runs-on: ubuntu-24.04
    needs: linux-regression
    if: "!cancelled()"
    strategy:
      fail-fast: false
      matrix:
        compiler:
        - gcc
        config:
        - release
    env:
      regression-artifact-pattern: "sl-linux-${{ matrix.compiler }}-${{ matrix.config }}-regression-*"
      statistics-artifact-name: sl-linux-${{ matrix.compiler }}-${{ matrix.config }}-statistics

    steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        architecture: x64

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
        sparse-checkout: scripts/scan_errors.py
        sparse-checkout-cone-mode: false

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: ${{ env.regression-artifact-pattern }}
        merge-multiple: true

    - name: Run scanner
      timeout-minutes: 30
      run: |
        ls -lR
        python3 scripts/scan_errors.py artifacts
        mv artifacts/sl-ic-errors.txt ${{ env.statistics-artifact-name }}.log

    - name: Upload regression artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.statistics-artifact-name }}
        path: ${{ env.statistics-artifact-name }}.log


# Code formatting
  CodeFormatting:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        # clang-format 18 seems to still settle and has different
        # outcome with minor versions. So using stable 17 for now.
        sudo apt-get install clang-format-17

    - name: Run formatting style check
      run: |
        export CLANG_FORMAT=clang-format-17
        "${CLANG_FORMAT}" --version
        ./.github/bin/run-clang-format.sh


# Code Tideness
  ClangTidy:
    runs-on: ubuntu-24.04

    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt -qq -y install clang-tidy-18 \
                                g++-11 default-jre cmake \
                                uuid-dev build-essential

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        architecture: x64

    - name: Setup Python Packages
      run: pip3 install build orderedmultidict psutil

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Create Cache Timestamp
      id: cache_timestamp
      uses: nanzm/get-time-action@v2.0
      with:
        format: 'YYYY-MM-DD-HH-mm-ss'

    - name: Retrieve cached results
      uses: actions/cache@v3
      with:
        path: |
          /home/runner/.cache/clang-tidy
          /home/runner/.cache/ccache
        key: clang-tidy-${{ steps.cache_timestamp.outputs.time }}
        restore-keys: clang-tidy-

    - name: Configure shell
      run: |
        echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV

    - name: Prepare source
      run: |
        make run-cmake-release_no_tcmalloc
        make -j2 -C build surelog  # creates all relevant artifacts
        ln -sf build/compile_commands.json .

    - name: Run clang tidy
      run: |
        export CLANG_TIDY=clang-tidy-18
        "${CLANG_TIDY}" --version
        ./.github/bin/run-clang-tidy.sh limited \
           || (cat Surelog_clang-tidy.out ; exit 1)
