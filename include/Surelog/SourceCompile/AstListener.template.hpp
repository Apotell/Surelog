// This file is auto-generated by generate_parser_listener.py
// DO NOT EDIT

/*
 Copyright 2019 Alain Dargelas
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 *
 * File:   AstListener.h
 * Author: hs
 *
 */

#ifndef SURELOG_ASTLISTENER_H
#define SURELOG_ASTLISTENER_H
#pragma once

#include <Surelog/Common/NodeId.h>
#include <Surelog/Common/PathId.h>
#include <Surelog/SourceCompile/VObjectTypes.h>

#include <cstdint>
#include <string>
#include <string_view>
#include <type_traits>
#include <unordered_set>
#include <vector>

namespace SURELOG {
class AstListener;
class Session;
class VObject;
struct AstNodeEqualityComparer;
struct AstNodeHash;
struct AstNodeLessComparer;

class AstNode final {
 public:
  AstNode() : m_index(), m_object(nullptr) {}
  AstNode(const AstNode& node)
      : m_index(node.m_index), m_object(node.m_object) {}
  AstNode(const NodeId& index, const VObject* const object)
      : m_index(index), m_object(object) {}

  AstNode& operator=(const AstNode& rhs) {
    if (this != &rhs) {
      m_index = rhs.m_index;
      m_object = rhs.m_object;
    }
    return *this;
  }

  bool operator==(const AstNode& rhs) const {
    return (m_index == rhs.m_index) && (m_object == rhs.m_object);
  }

  bool operator!=(const AstNode& rhs) const {
    return (m_index != rhs.m_index) || (m_object != rhs.m_object);
  }

 public:
  operator bool() const { return m_index && (m_object != nullptr); }
  operator NodeId() const { return m_index; }

 private:
  NodeId m_index;
  const VObject* m_object = nullptr;

  friend class AstListener;
  friend struct AstNodeHash;
  friend struct AstNodeEqualityComparer;
  friend struct AstNodeLessComparer;
};

struct AstNodeEqualityComparer final {
  bool operator()(const AstNode& lhs, const AstNode& rhs) const {
    return (lhs.m_index == rhs.m_index) && (lhs.m_object == rhs.m_object);
  }
};

struct AstNodeLessComparer final {
  bool operator()(const AstNode& lhs, const AstNode& rhs) const {
    return (lhs.m_index < rhs.m_index);
  }
};

struct AstNodeHash final {
  size_t operator()(const AstNode& node) const {
    return std::hash<RawNodeId>()(node.m_index);
  }
};

class AstListener {
 protected:
  using astnode_set_t = std::set<AstNode, AstNodeLessComparer>;
  using astnode_stack_t = std::vector<AstNode>;
  using astnode_vector_t = std::vector<AstNode>;

 public:
  AstListener() = default;
  virtual ~AstListener() = default;

  virtual bool shouldWalkSourceFile(Session* session, PathId fileId) const {
    return true;
  }
  virtual void enterSourceFile(Session* session, PathId fileId,
                               const std::string& sourceText) {}
  virtual void leaveSourceFile(PathId fileId, const std::string& sourceText) {}

  virtual void enter(const AstNode& node) {}
  virtual void leave(const AstNode& node) {}
  virtual void visit(const AstNode& node){}

  // clang-format off
<PUBLIC_ENTER_LEAVE_DECLARATIONS>
  // clang-format on

  // clang-format off
<PUBLIC_VISIT_DECLARATIONS>
  // clang-format on

  void listen(const AstNode& node);
  void listenChildren(const AstNode& node);
  void listenSiblings(const AstNode& node);

  void listen(Session* session, PathId fileId, const std::string& sourceText,
              const VObject* objects, size_t count);

  VObjectType getNodeType(const AstNode& node) const;
  AstNode getRootNode() const;

  bool getNodeText(const AstNode& node, std::string& text) const;
  bool getNodeText(const AstNode& node, std::string_view& text) const;
  bool getNodeFileId(const AstNode& node, PathId& fileId) const;

  bool getNodeStartLocation(const AstNode& node, int32_t& line,
                            int32_t& column) const;
  bool getNodeEndLocation(const AstNode& node, int32_t& line,
                          int32_t& column) const;
  bool getNodeLocation(const AstNode& node, int32_t& startLine,
                       int32_t& startColumn, int32_t& endLine,
                       int32_t& endColumn) const;

  AstNode getNodeParent(const AstNode& node) const;
  AstNode getNodeParent(const AstNode& node, VObjectType type) const;
  AstNode getNodeParent(const AstNode& node,
                        const std::set<VObjectType>& types) const;

  AstNode getNodePrevSibling(const AstNode& node) const;
  AstNode getNodePrevSibling(const AstNode& node, VObjectType type) const;
  AstNode getNodePrevSibling(const AstNode& node,
                             const std::set<VObjectType>& types) const;

  AstNode getNodeNextSibling(const AstNode& node) const;
  AstNode getNodeNextSibling(const AstNode& node, VObjectType type) const;
  AstNode getNodeNextSibling(const AstNode& node,
                             const std::set<VObjectType>& types) const;

  AstNode getNodeChild(const AstNode& node, VObjectType type) const;
  AstNode getNodeChild(const AstNode& node,
                       const std::set<VObjectType>& types) const;

  bool getNodeChildren(const AstNode& node, astnode_vector_t& children) const;
  bool getNodeSiblings(const AstNode& node, astnode_vector_t& siblings) const;

  AstNode getNodeOfTypeInHierarchy(const AstNode& node, VObjectType type,
                                   size_t depth = 4) const;
  AstNode getNodeOfTypeInHierarchy(const AstNode& node,
                                   const std::set<VObjectType>& types,
                                   size_t depth = 4) const;

  bool isOnCallstack(VObjectType type, size_t depth = 4) const;
  bool isOnCallstack(const std::set<VObjectType>& types,
                     size_t depth = 4) const;

 private:
  // clang-format off
<PRIVATE_LISTEN_DECLARATIONS>
  // clang-format on

 protected:
  Session* m_session = nullptr;
  astnode_set_t m_visited;
  astnode_stack_t m_callstack;

 private:
  const VObject* m_objects = nullptr;
  size_t m_count = 0;
};
}  // namespace SURELOG

#endif  // SURELOG_ASTLISTENER_H
